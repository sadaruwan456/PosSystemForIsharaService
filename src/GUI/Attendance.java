/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Cryptography.Cryption;
import DB.DB;
import Model.atd;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.RowFilter;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import sqllogger.SQLLog;

/**
 *
 * @author Lakshan
 */
public class Attendance extends javax.swing.JPanel {

    String NICOfLoanEmployee;
    SQLLog WriteToSql = new SQLLog();
    public String title = "Attendance";
    public static Attendance o;
    String DateToSearch;
    public boolean Authority = false;
    DefaultTableModel dtm;

    private Attendance() {

        initComponents();
        setDate();
        loadAttendance();

        Home.getObject().setAlwaysOnTop(false);
        search.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                setDate();
                dataSorter();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                setDate();
                dataSorter();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                setDate();
                dataSorter();
            }
        });
        dtm  = (DefaultTableModel)jTable1.getModel();
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(jTable1.getSelectedRowCount()==1){
                    NICOfLoanEmployee = dtm.getValueAt(jTable1.getSelectedRow(), 0).toString();
                    loadLoan();
                    
                }
            }
        });
    }

    public static synchronized Attendance getObject() {
        if (o == null) {
            o = new Attendance();
        }

        return o;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        loan_panel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dueammount = new javax.swing.JLabel();
        dateofloan = new javax.swing.JLabel();
        loan = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        newloan = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        payloan = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        EmpCount = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        AttCount = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        AbCount = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        dateText = new javax.swing.JTextField();

        jDateChooser1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jDateChooser1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jDateChooser1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateChooser1FocusLost(evt);
            }
        });
        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Date :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Filter :");

        search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFocusLost(evt);
            }
        });
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "NIC", "First Name", "Last Name", "Morning Attendance", "Evening Attendance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        loan_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Loan Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Loan :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Due Amount :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Last Loan Date :");

        dueammount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dueammount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dueammount.setText("0.00");

        dateofloan.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateofloan.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dateofloan.setText(" ");

        loan.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loan.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        loan.setText("0.00");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Issue New Loan :");

        newloan.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        newloan.setText("0");
        newloan.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newloanFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                newloanFocusLost(evt);
            }
        });
        newloan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                newloanKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Username :");

        username.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        username.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        username.setText("User");

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Save Loan");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton4.setText("Reset Loan");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        payloan.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        payloan.setText("0");
        payloan.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                payloanFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                payloanFocusLost(evt);
            }
        });
        payloan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                payloanKeyTyped(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Pay The Loan :");

        javax.swing.GroupLayout loan_panelLayout = new javax.swing.GroupLayout(loan_panel);
        loan_panel.setLayout(loan_panelLayout);
        loan_panelLayout.setHorizontalGroup(
            loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loan_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loan_panelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(loan_panelLayout.createSequentialGroup()
                        .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(loan_panelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(loan_panelLayout.createSequentialGroup()
                                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dueammount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(loan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(52, 52, 52)
                                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel5))))
                        .addGap(18, 18, 18)
                        .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(payloan)
                            .addComponent(newloan)
                            .addComponent(dateofloan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        loan_panelLayout.setVerticalGroup(
            loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loan_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(username)
                        .addComponent(jLabel5)
                        .addComponent(dateofloan)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dueammount)
                        .addComponent(jLabel13)
                        .addComponent(newloan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(loan))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(payloan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Save Attendence");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        EmpCount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        EmpCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        EmpCount.setText("0");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Employee Count :");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Attendance Count :");

        AttCount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AttCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        AttCount.setText("0");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Absent Count :");

        AbCount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AbCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        AbCount.setText("0");

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Reset Attendence");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        dateText.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loan_panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EmpCount)
                                .addGap(79, 79, 79)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AttCount)
                                .addGap(91, 91, 91)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AbCount))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(123, 123, 123)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(EmpCount)
                    .addComponent(jLabel10)
                    .addComponent(AttCount)
                    .addComponent(jLabel14)
                    .addComponent(AbCount))
                .addGap(18, 18, 18)
                .addComponent(loan_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
boolean action = true;
    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        // TODO add your handling code here:


    }//GEN-LAST:event_searchKeyReleased

    private void searchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFocusLost
        // TODO add your handling code here:


    }//GEN-LAST:event_searchFocusLost
    private void validateDate() {
        Date DayFromSelected = jDateChooser1.getDate();
        Date Today = new Date();
        if (DayFromSelected.after(Today)) {
            try {
                action = false;
                JOptionPane.showMessageDialog(this, "The day you enter can not be in the future", "Invalid date", JOptionPane.ERROR_MESSAGE);
                DateToSearch = new SimpleDateFormat("yyyy-MM-dd").format(Today);

                Date day = new SimpleDateFormat("yyyy-MM-dd").parse(DateToSearch);
                jDateChooser1.setDate(day);

                search.grabFocus();
                action = true;

            } catch (Exception e) {

            }

        } else {
            DateToSearch = new SimpleDateFormat("yyyy-MM-dd").format(DayFromSelected);
        }
    }
    private void jDateChooser1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateChooser1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateChooser1FocusGained

    private void jDateChooser1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateChooser1FocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_jDateChooser1FocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        if (dtm.getRowCount() > 0) {
            JPasswordField pf = new JPasswordField();

            int okcan = JOptionPane.showConfirmDialog(this, pf, "Enter Administrator Password", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (okcan == JOptionPane.OK_OPTION) {
                String qry = "this is not sql error";
                try {
                    String pw = Cryption.encript(pf.getText());
                    qry = "SELECT username FROM user WHERE user_type_id=1 AND password='" + pw + "' ";
                    ResultSet rs = DB.search(qry);
                    WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
                    if (rs.next()) {

                        Attendance.getObject().Authority = true;
                        Attendance.getObject().inputData();

                    } else {

                        JOptionPane.showMessageDialog(this, "Password you enterd is invalid or not an administrator", "invalid password", JOptionPane.ERROR_MESSAGE);
                        
                    }
                } catch (Exception e) {
                    try {

                        WriteToSql.writeToFileSearch(qry, "unsuccessful", e.toString(), this.getClass().getName());
                    } catch (Exception ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if (okcan == JOptionPane.CANCEL_OPTION || okcan == JOptionPane.CLOSED_OPTION) {
                resetAttendance();
            }
        } else {
            JOptionPane.showMessageDialog(this, "The table cannot be empty ", "empty data", JOptionPane.ERROR_MESSAGE);
        }
        Payroll.getObject().tableLoad();

    }//GEN-LAST:event_jButton1ActionPerformed


    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange

        
        // TODO add your handling code here:
        loadDataToTable();
        validateDate();
        ShowDate();
    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        
       
    }//GEN-LAST:event_jTable1MouseClicked

    private void loadLoan(){
         String qry = "SELECT * FROM employee,loan WHERE employee.nic = loan.nic AND loan.nic = '" + NICOfLoanEmployee + "' AND employee.nic <> 0";
        try {
            ResultSet rs = DB.search(qry);
            WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
            if (rs.next()) {
                username.setText(rs.getString("fname") + " " + rs.getString("lname"));
                dueammount.setText(rs.getString("dueammount"));
                loan.setText(rs.getString("Loan"));
                dateofloan.setText(rs.getString("loan.date"));

            } else {
                qry = "SELECT * FROM employee WHERE nic='" + NICOfLoanEmployee + "' AND nic <> 0";
                rs = DB.search(qry);
                WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
                if (rs.next()) {
                    username.setText(rs.getString("fname") + " " + rs.getString("lname"));
                    dueammount.setText("0");
                    loan.setText("0");
                    dateofloan.setText("-");

                }
            }
        } catch (Exception e) {
            try {

                WriteToSql.writeToFileSearch(qry, "unsuccessful", e.toString(), this.getClass().getName());
            } catch (Exception ex) {
                Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        resetAttendance();
        loadDataToTable();

    }//GEN-LAST:event_jButton2ActionPerformed
    private void resetAttendance() {
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        DateToSearch = sdf.format(d);

        Date day;
        try {
            day = new SimpleDateFormat("yyyy-MM-dd").parse(DateToSearch);
            jDateChooser1.setDate(day);
            
        } catch (ParseException ex) {
            Logger.getLogger(Attendance.class.getName()).log(Level.SEVERE, null, ex);
        }
        search.setText(null);
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if ((Double.parseDouble(newloan.getText()) > 0 || Double.parseDouble(payloan.getText()) > 0) && !username.getText().equalsIgnoreCase("User")) {
            JPasswordField pf = new JPasswordField();
            int okcan = JOptionPane.showConfirmDialog(this, pf, "Enter Administrator Password", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (okcan == JOptionPane.OK_OPTION) {
                String qry = "this is not a sql error";
                try {
                    String pw = Cryption.encript(pf.getText());
                    qry = "SELECT username FROM user WHERE user_type_id=1 AND password='" + pw + "' ";
                    ResultSet rs = DB.search(qry);
                    WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
                    if (rs.next()) {

                        Attendance.getObject().Authority = true;
                        Attendance.getObject().addDataToLoan();

                    } else {
                        JOptionPane.showMessageDialog(this, "Password you enterd is invalid or not an administrator", "invalid password", JOptionPane.ERROR_MESSAGE);
                        resetLoan();
                    }
                } catch (Exception e) {
                    try {

                        WriteToSql.writeToFileSearch(qry, "unsuccessful", e.toString(), this.getClass().getName());
                    } catch (Exception ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    public void addDataToLoan() {
        String NewLoan = newloan.getText();

        double Due_Ammount = Double.valueOf(dueammount.getText());
        double Loan_Ammount = Double.valueOf(loan.getText());
        double New_Loan = Double.valueOf(newloan.getText());
        double Pay_Loan = Double.valueOf(payloan.getText());
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String Date_Of_Loan = sdf.format(d);
        Loan_Ammount = Loan_Ammount + New_Loan;
        Due_Ammount = Due_Ammount - Pay_Loan;
        if (Due_Ammount > Loan_Ammount) {
            Due_Ammount = Loan_Ammount - Due_Ammount;

        }
        String qry = "SELECT * FROM loan WHERE nic = '" + NICOfLoanEmployee + "'";
        try {

            ResultSet rs = DB.search(qry);
            WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
            if (rs.next()) {
                Due_Ammount = Double.valueOf(rs.getString("dueammount")) + New_Loan - Pay_Loan;
                if (Double.parseDouble(newloan.getText()) > 0) {
                    qry = "UPDATE loan SET loan = '" + Loan_Ammount + "',dueammount = '" + Due_Ammount + "', date ='" + Date_Of_Loan + "' WHERE nic ='" + NICOfLoanEmployee + "' ";
                    DB.iud(qry);
                    WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
                } else {
                    qry = "UPDATE loan SET dueammount = '" + Due_Ammount + "' WHERE nic ='" + NICOfLoanEmployee + "' ";
                    DB.iud(qry);
                    WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
                }

            } else {
                Due_Ammount = Due_Ammount + New_Loan - Pay_Loan;
                qry = "INSERT INTO loan(nic,loan,dueammount,date) VALUES ('" + NICOfLoanEmployee + "','" + Loan_Ammount + "','" + Due_Ammount + "','" + Date_Of_Loan + "')";
                DB.iud(qry);
                WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());

            }
            resetLoan();

            JOptionPane.showMessageDialog(this, "Updated Successfully", "Successfull", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            try {

                WriteToSql.writeToFileSearch(qry, "unsuccessful", e.toString(), this.getClass().getName());
            } catch (Exception ex) {
                Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    private void resetLoan() {
        username.setText("User");
        dueammount.setText("0.00");
        loan.setText("0.00");
        dateofloan.setText(null);
        newloan.setText("0");
        payloan.setText("0");
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        resetLoan();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void newloanFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newloanFocusGained
        if (Double.valueOf(newloan.getText()) == 0) {
            newloan.setText(null);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_newloanFocusGained

    private void newloanFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newloanFocusLost
        if (newloan.getText().isEmpty()) {
            newloan.setText("0");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_newloanFocusLost

    private void payloanFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_payloanFocusLost
        if (payloan.getText().isEmpty()) {
            payloan.setText("0");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_payloanFocusLost

    private void payloanFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_payloanFocusGained
        if (Double.valueOf(payloan.getText()) == 0) {
            payloan.setText(null);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_payloanFocusGained

    private void newloanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newloanKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_newloanKeyTyped

    private void payloanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_payloanKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_payloanKeyTyped

    public void inputData() {

        String NIC;
        String DateToInput = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooser1.getDate());
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        if (Authority) {
            String qry = "this is not a sql error";
            try {
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    NIC = dtm.getValueAt(i, 0).toString();
                    int MA = 0;
                    int EA = 0;
                    String MorningAttendance = dtm.getValueAt(i, 3).toString();
                    String EveningAttendance = dtm.getValueAt(i, 4).toString();
                    if (MorningAttendance.equals("true")) {
                        MA = 1;
                    }
                    if (EveningAttendance.equals("true")) {
                        EA = 1;
                    }
                    qry = "SELECT * FROM attendence,employee WHERE employee_nic ='" + NIC + "' AND attendence.date = '" + DateToInput + "' ";
                    ResultSet rs = DB.search(qry);
                    WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());

                    if (rs.next()) {
                        qry = "UPDATE attendence SET Morning ='" + MA + "', Evening = '" + EA + "' WHERE employee_nic = '" + NIC + "' AND date='"+DateToInput+"'";
                        DB.iud(qry);
                        WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());

                    }
                    if (!(rs.next())) {
                        qry = "INSERT INTO attendence(employee_nic,date,Morning,Evening) VALUES('" + NIC + "','" + DateToInput + "','" + MA + "','" + EA + "')";
                        DB.iud(qry);
                        WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());

                    }

                }
                JOptionPane.showMessageDialog(this, "Attendance Marked Successfully", "Successfull", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                try {

                    WriteToSql.writeToFileSearch(qry, "unsuccessful", e.toString(), this.getClass().getName());
                } catch (Exception ex) {
                    Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            Authority = false;
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel AbCount;
    public javax.swing.JLabel AttCount;
    public javax.swing.JLabel EmpCount;
    private javax.swing.JTextField dateText;
    private javax.swing.JLabel dateofloan;
    private javax.swing.JLabel dueammount;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel loan;
    private javax.swing.JPanel loan_panel;
    private javax.swing.JTextField newloan;
    private javax.swing.JTextField payloan;
    private javax.swing.JTextField search;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables

    private void setDate() {
        if (jDateChooser1.getDate() == null) {
            try {
                Date d = new Date();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                DateToSearch = sdf.format(d);
                Date day = new SimpleDateFormat("yyyy-MM-dd").parse(DateToSearch);
                jDateChooser1.setDate(day);

            } catch (Exception e) {

            }
        } else {

            Date d = jDateChooser1.getDate();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            DateToSearch = sdf.format(d);

        }

    }

    private void loadAttendance() {

        Timer t = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                atd a = new atd();

                a.loadAttendance();
            }
        });
        t.start();
    }

    private void ShowDate() {
        if (!(jDateChooser1.getDate() == null)) {
            dateText.setText(new SimpleDateFormat("yyyy-MM-dd").format(jDateChooser1.getDate()));
        }
    }

    private void loadDataToTable() {
        String qry = "this is not a sql error";
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();

            String DateOfSearch = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooser1.getDate());

            dtm.setRowCount(0);
            qry = "SELECT * FROM employee WHERE status = 1 AND nic <> 0";
            ResultSet rs = DB.search(qry);
            WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
            while (rs.next()) {
                Vector v = new Vector();
                String Employee_NIC = rs.getString("nic");
                v.add(rs.getString("nic"));
                v.add(rs.getString("fname"));
                v.add(rs.getString("lname"));
                qry = "SELECT * FROM attendence,employee WHERE employee.nic = attendence.employee_nic AND employee.status = 1 AND  attendence.date = '" + DateOfSearch + "' AND employee_nic = '" + Employee_NIC + "'";
                ResultSet rs1 = DB.search(qry);
                WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
                if (rs1.next()) {
                    int morning_status = rs1.getInt("Morning");
                    int evening_status = rs1.getInt("Evening");
                    if (morning_status == 1) {
                        v.add(true);
                    } else {
                        v.add(false);
                    }
                    if (evening_status == 1) {
                        v.add(true);
                    } else {
                        v.add(false);
                    }
                } else {
                    v.add(false);
                    v.add(false);
                }
                dtm.addRow(v);
            }

        } catch (Exception e) {
            try {

                WriteToSql.writeToFileSearch(qry, "unsuccessful", e.toString(), this.getClass().getName());
            } catch (Exception ex) {
                Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void dataSorter() {

        TableRowSorter<TableModel> soter = new TableRowSorter<TableModel>(((DefaultTableModel) jTable1.getModel()));
        soter.setRowFilter(RowFilter.regexFilter(search.getText()));
        jTable1.setRowSorter(soter);
    }

}
