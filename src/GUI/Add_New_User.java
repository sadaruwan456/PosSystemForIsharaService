/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Cryptography.Cryption;
import DB.DB;
import Model.SuggestionList;

import java.sql.ResultSet;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import sqllogger.SQLLog;
import validation.Validation;


/**
 *
 *
 * @author OLE
 */
public class Add_New_User extends javax.swing.JPanel {

    SQLLog WriteToSql = new SQLLog();
    
    
    String firstName;
    String lastName;
    String errorState;
    String user="Â ";

    private Add_New_User() {
        initComponents();
        loadType();
        nic.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
               
                EmployeeName.setText("Employee Name");
                if (Validation.validateNic(nic.getText())) {
                    m();
                  
                }else{
                    register.setEnabled(false);
                }

            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                EmployeeName.setText("Employee Name");
                
                if (Validation.validateNic(nic.getText())) {
                    m();
                   
                }else{
                    register.setEnabled(false);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                EmployeeName.setText("Employee Name");
                
                if (Validation.validateNic(nic.getText())) {
                    m();
                  
                }else{
                    register.setEnabled(false);
                }

            }

            private void m() {
                if(isEmployee()){
                 EmployeeName.setText(firstName+" "+lastName);
                }
                if (!(isUser()) && isEmployee()) {
                    register.setEnabled(true);
                } else {
                    register.setEnabled(false);
                }
            }
        });
    }
    private static Add_New_User o;

    public static Add_New_User getObject() {
        if (o == null) {
            o = new Add_New_User();
        }
        o.register.setEnabled(false);

        return o;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     * @return
     */
    private boolean isUser() {
        boolean validation = false;
        String qry = "SELECT username FROM user WHERE employee_nic='" + nic.getText() + "'  AND employee_nic<>0 ";
        try {
            ResultSet rs = DB.search(qry);
            if (rs.next()) {
                validation = true;
            }
        } catch (Exception e) {
            validation = true;
        }
        return validation;
    }

    private boolean isEmployee() {
        boolean validation = true;
        String qry = "SELECT fname,lname FROM employee WHERE nic='" + nic.getText() + "'  AND nic<>0";
        try {
            ResultSet rs = DB.search(qry);
            if (!(rs.next())) {
                validation = false;
            }else{
                firstName=rs.getString("fname");
                lastName = rs.getString("lname");
            }
        } catch (Exception e) {
            validation = false;
        }

        return validation;
    }

    public void reset() {
        nic.setText(null);
        usertype.setSelectedIndex(0);
        username.setText(null);
        email.setText(null);
        n_password.setText(null);
        rn_password.setText(null);

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nicSuggestionBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        register = new javax.swing.JButton();
        n_password = new javax.swing.JPasswordField();
        rn_password = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        usertype = new javax.swing.JComboBox<>();
        nic = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        EmployeeName = new javax.swing.JLabel();

        setToolTipText("");

        nicSuggestionBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nicSuggestionBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nicSuggestionBoxItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add New User");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel3.setText("Password");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel4.setText("Retype Password");

        register.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        register.setText("Register New User");
        register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerActionPerformed(evt);
            }
        });

        n_password.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        rn_password.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel9.setText("User NIC");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel10.setText("E-Mail");

        email.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        email.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailFocusLost(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel11.setText("User Type");

        usertype.setPreferredSize(new java.awt.Dimension(6, 25));

        nic.setPreferredSize(new java.awt.Dimension(6, 25));
        nic.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nicFocusLost(evt);
            }
        });
        nic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nicActionPerformed(evt);
            }
        });
        nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nicKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel12.setText("Username");

        username.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton3.setText("Reset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel13.setText("Employee Name");

        EmployeeName.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        EmployeeName.setText("Employee Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                            .addComponent(register, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nicSuggestionBox, 0, 236, Short.MAX_VALUE)
                            .addComponent(username)
                            .addComponent(n_password, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(rn_password, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(email)
                            .addComponent(usertype, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(EmployeeName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13)
                    .addComponent(EmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(nicSuggestionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(usertype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(n_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rn_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addComponent(register)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerActionPerformed
        String qry = "";
        try {
            qry = "SELECT username from user where username='"+Cryption.encript(username.getText())+"'";
            ResultSet rs = DB.search(qry);
            if(rs.next()){
               user=rs.getString("username");
            }
            System.out.println(user);
        } catch (Exception e) {
        }
        
        if(validateData()){
           
            try {
                
                qry = "SELECT id FROM user_type WHERE type='"+usertype.getSelectedItem().toString()+"'";
                ResultSet rs = DB.search(qry);
                rs.next();
                
                qry = "INSERT INTO user(username,password,user_type_id,employee_nic) VALUES('"+Cryption.encript(username.getText())+"','"+Cryption.encript(n_password.getText())+"','"+rs.getString("id")+"','"+nic.getText()+"')";
                DB.iud(qry);
                JOptionPane.showMessageDialog(this, "User Successfuly Registerd", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                reset();
            } catch (Exception e) {
            }
 
        }else{
            JOptionPane.showMessageDialog(this, errorState, "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_registerActionPerformed

    private void nicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicKeyReleased
        SuggestionList.showList(nic, nicSuggestionBox, "SELECT nic FROM employee WHERE status = 1 AND nic LIKE '" + nic.getText() + "%' AND nic <> 0", "nic", evt, this.getClass().getName());
    }//GEN-LAST:event_nicKeyReleased

    private void nicSuggestionBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nicSuggestionBoxItemStateChanged
        SuggestionList.setSelectedItem(nic, nicSuggestionBox);
    }//GEN-LAST:event_nicSuggestionBoxItemStateChanged

    private void nicFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nicFocusLost

        // TODO add your handling code here:
    }//GEN-LAST:event_nicFocusLost

    private void emailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailFocusLost


    }//GEN-LAST:event_emailFocusLost

    private void nicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nicActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_nicActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        reset();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EmployeeName;
    private javax.swing.JTextField email;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField n_password;
    private javax.swing.JTextField nic;
    private javax.swing.JComboBox<String> nicSuggestionBox;
    private javax.swing.JButton register;
    private javax.swing.JPasswordField rn_password;
    private javax.swing.JTextField username;
    private javax.swing.JComboBox<String> usertype;
    // End of variables declaration//GEN-END:variables

    private void loadType() {
        String qry = "SELECT type FROM user_type";
        try {
            ResultSet rs = DB.search(qry);
            WriteToSql.writeToFileSearch(qry, "Successful", null, this.getClass().getName());
            while (rs.next()) {
                usertype.addItem(rs.getString("type"));
            }
        } catch (Exception e) {
            try {

                WriteToSql.writeToFileSearch(qry, "unsuccessful", e.toString(), this.getClass().getName());
            } catch (Exception ex) {
                Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private boolean validateData() {
    boolean validation = true;
        if(username.getText().isEmpty()){
        validation = false;
           errorState = "Username can not be empty";
        
        }
        else if(email.getText().isEmpty()){
        validation = false;
          errorState = "Email Can not be empty";
        }
        else if(!(Validation.validateNic(nic.getText()))){
            validation = false;
            System.out.println("3");
            errorState = "Incorrect Email";
        }
        else if(n_password.getText().isEmpty() || rn_password.getText().isEmpty()){
            validation = false;
            errorState = "Password Cannot be empty";
        }else if(!(n_password.getText().equals(rn_password.getText()))){
            validation = false;
            errorState = "password does not match";
        }
        
        else if(user.equals(Cryption.encript(username.getText()))){
         validation=false;
            errorState="username alredy exsists";
        }
       
            
        
        return validation;
    }

}
